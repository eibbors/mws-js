// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, MWSBool, MWSClient, MWSComplexList, MWSComplexParam, MWSEnum, MWSEnumList, MWSParam, MWSParamList, MWSRequest, MWSResponse, MWSService, MWSTimestamp, MWS_LOCALES, MWS_MARKETPLACES, MWS_SIGNATURE_METHOD, MWS_SIGNATURE_VERSION, crypto, https, qs, types, xml2js, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EventEmitter = require("events").EventEmitter;

  https = require("https");

  qs = require("querystring");

  crypto = require("crypto");

  xml2js = require('xml2js');

  MWS_SIGNATURE_METHOD = 'HmacSHA256';

  MWS_SIGNATURE_VERSION = 2;

  MWS_MARKETPLACES = {
    ATVPDKIKX0DER: 'US',
    A1F83G8C2ARO7P: 'UK',
    A13V1IB3VIYZZH: 'FR',
    A1PA6795UKMFR9: 'DE',
    APJ6JRA9NG5V4: 'IT',
    A1RKKUPIHCS9HS: 'ES',
    US: 'ATVPDKIKX0DER',
    UK: 'A1F83G8C2ARO7P',
    FR: 'A13V1IB3VIYZZH',
    DE: 'A1PA6795UKMFR9',
    IT: 'APJ6JRA9NG5V4',
    ES: 'A1RKKUPIHCS9HS',
    CA: null,
    CN: null,
    JP: null
  };

  MWS_LOCALES = {
    US: {
      host: "mws.amazonservices.com",
      country: 'UnitedStates',
      domain: 'www.amazon.com',
      marketplaceId: MWS_MARKETPLACES.US
    },
    UK: {
      host: "mws.amazonservices.co",
      country: 'UnitedKingdom',
      domain: 'www.amazon.co.uk',
      marketplaceId: MWS_MARKETPLACES.UK
    },
    FR: {
      host: "mws.amazonservices.fr",
      country: 'France',
      domain: 'www.amazon.fr',
      marketplaceId: MWS_MARKETPLACES.FR
    },
    DE: {
      host: "mws.amazonservices.de",
      country: 'Germany',
      domain: 'www.amazon.de',
      marketplaceId: MWS_MARKETPLACES.DE
    },
    IT: {
      host: "mws.amazonservices.it",
      country: 'Italy',
      domain: 'www.amazon.it',
      marketplaceId: MWS_MARKETPLACES.IT
    },
    ES: {
      host: "mws.amazonservices.es",
      country: 'Spain',
      domain: 'www.amazon.es',
      marketplaceId: MWS_MARKETPLACES.ES
    },
    CA: {
      host: "mws.amazonservices.ca",
      country: 'Canada',
      domain: 'www.amazon.ca',
      marketplaceId: MWS_MARKETPLACES.CA
    },
    CN: {
      host: "mws.amazonservices.cn",
      country: 'China',
      domain: 'www.amazon.cn',
      marketplaceId: MWS_MARKETPLACES.CN
    },
    JP: {
      host: "mws.amazonservices.jp",
      country: 'Japan',
      domain: 'www.amazon.jp',
      marketplaceId: MWS_MARKETPLACES.JP
    }
  };

  types = {
    ServiceStatus: {
      GREEN: "The service is operating normally.",
      GREEN_I: "The service is operating normally + additional info provided",
      YELLOW: "The service is experiencing higher than normal error rates or degraded performance.",
      RED: "The service is unabailable or experiencing extremely high error rates."
    }
  };

  MWSClient = (function(_super) {
    __extends(MWSClient, _super);

    function MWSClient() {
      var e, extras, k, options, v, _i, _len, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      options = arguments[0], extras = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (options == null) {
        options = {};
      }
      for (_i = 0, _len = extras.length; _i < _len; _i++) {
        e = extras[_i];
        if (typeof e === 'object') {
          for (k in e) {
            v = e[k];
            options[k] = v;
          }
        }
      }
      if (options.locale != null) {
        if (typeof options.locale !== 'object') {
          options.locale = (_ref = MWS_LOCALES[options.locale]) != null ? _ref : null;
        }
        this.host = (_ref1 = options.host) != null ? _ref1 : (_ref2 = options.locale.host) != null ? _ref2 : "mws.amazonservices.com";
        this.marketplaceId = options.locale.marketplaceId;
        this.country = (_ref3 = options.locale.country) != null ? _ref3 : void 0;
        this.domain = (_ref4 = options.locale.domain) != null ? _ref4 : void 0;
      }
      this.host = (_ref5 = this.host) != null ? _ref5 : (_ref6 = options.host) != null ? _ref6 : "mws.amazonservices.com";
      this.port = (_ref7 = options.port) != null ? _ref7 : 443;
      this.merchantId = (_ref8 = options.merchantId) != null ? _ref8 : null;
      this.accessKeyId = (_ref9 = options.accessKeyId) != null ? _ref9 : null;
      this.secretAccessKey = (_ref10 = options.secretAccessKey) != null ? _ref10 : null;
      if (this.marketplaceId == null) {
        this.marketplaceId = (_ref11 = this.marketplaceId) != null ? _ref11 : (_ref12 = options.marketplaceId) != null ? _ref12 : null;
      }
      this.appName = options.appName || 'mws-js';
      this.appVersion = options.appVersion || "0.2.0";
      this.appLanguage = options.appLanguage || "JavaScript";
      this.appHost = (_ref13 = options.appHost) != null ? _ref13 : void 0;
      this.appPlatform = (_ref14 = options.appPlatform) != null ? _ref14 : void 0;
      options;
    }

    MWSClient.prototype.sign = function(service, q) {
      var hash, k, keys, path, sorted, stringToSign, v, _i, _len, _ref;
      if (q == null) {
        q = {};
      }
      path = (_ref = service.path) != null ? _ref : '/';
      hash = crypto.createHmac("sha256", this.secretAccessKey);
      if (service.legacy) {
        q['Merchant'] = this.merchantId;
      } else {
        q['SellerId'] = this.merchantId;
      }
      if (q['AWSAccessKeyId'] == null) {
        q['AWSAccessKeyId'] = this.accessKeyId;
      }
      q['SignatureMethod'] = MWS_SIGNATURE_METHOD;
      q['SignatureVersion'] = MWS_SIGNATURE_VERSION;
      sorted = {};
      keys = ((function() {
        var _results;
        _results = [];
        for (k in q) {
          v = q[k];
          _results.push(k);
        }
        return _results;
      })()).sort();
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        k = keys[_i];
        sorted[k] = q[k];
      }
      stringToSign = "POST\n" + this.host + "\n" + path + "\n" + (qs.stringify(sorted));
      stringToSign = stringToSign.replace(/'/g, '%27');
      stringToSign = stringToSign.replace(/\*/g, '%2A');
      stringToSign = stringToSign.replace(/\(/g, '%28');
      stringToSign = stringToSign.replace(/\)/g, '%29');
      q['Signature'] = hash.update(stringToSign).digest('base64');
      return q;
    };

    MWSClient.prototype.invoke = function(request, options, cb) {
      var agentParams, h, q, req, v, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      if (request != null ? request.body : void 0) {
        request.md5Calc();
      }
      if (options != null ? options.body : void 0) {
        request.attach(options.body, 'text');
      }
      if (options.path == null) {
        options.path = (_ref = (_ref1 = request.service) != null ? _ref1.path : void 0) != null ? _ref : '/';
      }
      q = this.sign((_ref2 = (_ref3 = options.service) != null ? _ref3 : request.service) != null ? _ref2 : null, request.query((_ref4 = options.query) != null ? _ref4 : {}));
      if (options.headers == null) {
        options.headers = {};
      }
      _ref5 = request.headers;
      for (h in _ref5) {
        v = _ref5[h];
        options.headers[h] = v;
      }
      if (request.body || options.body) {
        if (options.body == null) {
          options.body = request.body;
        }
        options.path = "" + options.path + "?" + (qs.stringify(q));
      } else {
        options.body = qs.stringify(q);
        options.headers['content-type'] = 'application/x-www-form-urlencoded; charset=utf-8';
      }
      options.headers['host'] = this.host;
      agentParams = ["Language=" + this.appLanguage];
      if (this.appHost) {
        agentParams.push("Host=" + this.appHost);
      }
      if (this.appPlatform) {
        agentParams.push("Platform=" + this.appPlatform);
      }
      options.headers['user-agent'] = "" + this.appName + "/" + this.appVersion + " (" + (agentParams.join('; ')) + ")";
      options.headers['content-length'] = options.body.length;
      if (options.host == null) {
        options.host = this.host;
      }
      if (options.port == null) {
        options.port = this.port;
      }
      if (options.method == null) {
        options.method = 'POST';
      }
      req = https.request(options, function(res) {
        var data;
        data = [];
        res.on('data', function(chunk) {
          return data.push(chunk);
        });
        res.on('end', function() {
          var mwsres;
          data = Buffer.concat(data);
          mwsres = new MWSResponse(res, data, options);
          mwsres.parseHeaders();
          return mwsres.parseBody(function(err, parsed) {
            var invokeOpts, nextRequest, _ref6, _ref7, _ref8;
            if ((options.nextTokenCall != null) && (((_ref6 = mwsres.result) != null ? (_ref7 = _ref6.NextToken) != null ? _ref7.length : void 0 : void 0) > 0)) {
              invokeOpts = {
                nextTokenCall: options.nextTokenCall
              };
              if (options.nextTokenCallUseHasNext) {
                invokeOpts.nextTokenCallUseHasNext = options.nextTokenCallUseHasNext;
                if (((_ref8 = mwsres.result) != null ? _ref8.HasNext : void 0) === 'true') {
                  mwsres.nextToken = mwsres.result.NextToken;
                }
              } else {
                mwsres.nextToken = mwsres.result.NextToken;
              }
              nextRequest = new options.nextTokenCall({
                NextToken: mwsres.nextToken
              });
              mwsres.getNext = function() {
                var k, opts;
                opts = {};
                for (k in invokeOpts) {
                  v = invokeOpts[k];
                  opts[k] = v;
                }
                return _this.invoke(nextRequest, opts, cb);
              };
            }
            _this.emit('response', mwsres, parsed);
            return cb(mwsres);
          });
        });
        return res.on('error', function(err) {
          _this.emit('error', err);
          return cb(err, null, Buffer.concat(data).toString());
        });
      });
      this.emit('request', req, options);
      req.write(options.body);
      return req.end();
    };

    return MWSClient;

  })(EventEmitter);

  MWSService = (function() {
    function MWSService(options) {
      var k, v;
      for (k in options) {
        v = options[k];
        this[k] = v;
      }
      if (this.name == null) {
        this.name = null;
      }
      if (this.path == null) {
        this.path = '/';
      }
      if (this.version == null) {
        this.version = '2009-01-01';
      }
      if (this.legacy == null) {
        this.legacy = false;
      }
    }

    return MWSService;

  })();

  MWSRequest = (function() {
    function MWSRequest(service, action, params, headers, body, init) {
      var i, p, pid, _ref, _ref1, _ref2;
      this.service = service;
      this.action = action;
      this.params = params != null ? params : [];
      this.headers = headers != null ? headers : {};
      this.body = body != null ? body : null;
      if (init == null) {
        init = {};
      }
      if (this.service == null) {
        this.service = new MWSService;
      }
      _ref = this.params;
      for (i in _ref) {
        p = _ref[i];
        pid = (_ref1 = p.name) != null ? _ref1 : i;
        if (init[pid] != null) {
          p.set(init[pid]);
        }
        this[pid] = (_ref2 = this.params[i]) != null ? _ref2 : null;
      }
    }

    MWSRequest.prototype.query = function(q) {
      var i, p, val, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (q == null) {
        q = {};
      }
      _ref = this.params;
      for (i in _ref) {
        p = _ref[i];
        val = (_ref1 = (_ref2 = this[(_ref3 = p.name) != null ? _ref3 : i]) != null ? _ref2 : p) != null ? _ref1 : {};
        if (val.render != null) {
          val.render(q);
        } else {
          q[(_ref4 = val.name) != null ? _ref4 : i] = (_ref5 = val.value) != null ? _ref5 : p;
        }
      }
      q['Action'] = this.action;
      q['Version'] = (_ref6 = this.service.version) != null ? _ref6 : '2009-01-01';
      q['Timestamp'] = (new Date()).toISOString();
      return q;
    };

    MWSRequest.prototype.set = function(param, value) {
      var k, v, _ref, _results;
      if (typeof param === 'object' && value === void 0) {
        _results = [];
        for (k in param) {
          v = param[k];
          _results.push(this.set(k, v));
        }
        return _results;
      } else {
        if (((_ref = this[param]) != null ? _ref.set : void 0) != null) {
          return this[param].set(value != null ? value : null);
        } else {
          throw "" + param + " is not a valid parameter for this request type";
        }
      }
    };

    MWSRequest.prototype.attach = function(body, format) {
      this.body = body;
      this.headers['content-type'] = format != null ? format : 'text';
      return this.md5Calc();
    };

    MWSRequest.prototype.md5Calc = function() {
      return this.headers['content-md5'] = crypto.createHash('md5').update(this.body).digest("base64");
    };

    return MWSRequest;

  })();

  MWSResponse = (function() {
    function MWSResponse(response, body, options) {
      var _ref;
      if (options == null) {
        options = {};
      }
      this.statusCode = response.statusCode;
      this.headers = response.headers;
      this.body = body != null ? body : null;
      this.meta = {};
      this.options = options;
      this.allowedContentTypes = (_ref = options != null ? options.allowedContentTypes : void 0) != null ? _ref : [];
    }

    MWSResponse.prototype.parseHeaders = function() {
      var header, id, ns, value, xreg, _base, _ref, _results;
      _ref = this.headers;
      _results = [];
      for (header in _ref) {
        value = _ref[header];
        xreg = /x-(\w+)-(.*)/gi.exec(header);
        if (xreg) {
          ns = xreg[1];
          id = xreg[2].replace(/(\-[a-z])/g, function($1) {
            return $1.toUpperCase().replace('-', '');
          });
          if ((_base = this.meta)[ns] == null) {
            _base[ns] = {};
          }
          _results.push(this.meta[ns][id] = value);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MWSResponse.prototype.parseBody = function(cb) {
      var isXml, md5, parser, _ref, _ref1,
        _this = this;
      isXml = false;
      if (this.headers['content-type'].indexOf('text/xml') === 0) {
        this.body = this.body.toString();
        isXml = true;
      } else if (this.headers['content-type'].indexOf('text/plain') === 0) {
        this.body = this.body.toString().trim();
        isXml = this.body.indexOf('<?xml') === 0;
      } else if (this.headers['content-type'].indexOf('application/octet-stream') === 0) {
        this.body = this.body.toString().trim();
        isXml = this.body.indexOf('<?xml') === 0;
      }
      if (isXml) {
        parser = new xml2js.Parser({
          explicitRoot: true,
          normalize: false,
          trim: false
        });
        return parser.parseString(this.body, function(err, res) {
          var k, rtype, v, _ref, _ref1;
          if (err) {
            throw err;
          } else {
            _this.response = res != null ? res : {};
            _ref = _this.response;
            for (k in _ref) {
              v = _ref[k];
              rtype = /([A-Z]\w+)Response/.exec(k);
              if (rtype) {
                _this.responseType = rtype[1];
                if (_this.responseType === 'Error') {
                  _this.error = (_ref1 = v.Error) != null ? _ref1 : v;
                  _this.requestI;
                }
                if (v["" + _this.responseType + "Result"]) {
                  _this.result = v["" + _this.responseType + "Result"];
                }
                if (v.ResponseMetadata != null) {
                  _this.meta.response = v.ResponseMetadata;
                }
              }
            }
            return cb(err, res);
          }
        });
      } else if (_ref = this.headers['content-type'], __indexOf.call(this.allowedContentTypes, _ref) >= 0) {
        md5 = crypto.createHash('md5').update(this.body).digest("base64");
        if (this.headers['content-md5'] === md5) {
          this.response = this.body;
          return cb(null, this.body);
        } else {
          this.responseType = 'Error';
          this.error = {
            Type: {},
            Code: 'Client_WrongMD5',
            Message: "Invalid MD5 on received content: amazon=" + this.headers['content-md5'] + " , calculated=" + md5
          };
          this.response = null;
          this.responseWithInvalidMD5 = this.body;
          return cb(this.error, null);
        }
      } else {
        this.responseType = 'Error';
        this.error = {
          Type: {},
          Code: 'Client_UknownContent',
          Message: "Unrecognized content format: " + ((_ref1 = this.headers['content-type']) != null ? _ref1 : 'undefined')
        };
        this.response = null;
        return cb(this.error, null);
      }
    };

    return MWSResponse;

  })();

  MWSParam = (function() {
    function MWSParam(name, required, value) {
      this.name = name;
      this.required = required != null ? required : false;
      if (value != null) {
        this.set(value);
      }
    }

    MWSParam.prototype.render = function(obj) {
      var val;
      if (obj == null) {
        obj = {};
      }
      val = this.get();
      if (val != null) {
        obj[this.name] = this.get();
        return obj;
      } else if (this.required) {
        throw "Required parameter " + this.name + " must be defined!";
      }
    };

    MWSParam.prototype.get = function() {
      return this.value;
    };

    MWSParam.prototype.set = function(val) {
      this.value = val;
      return this;
    };

    return MWSParam;

  })();

  MWSBool = (function(_super) {
    __extends(MWSBool, _super);

    function MWSBool() {
      _ref = MWSBool.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MWSBool.prototype.get = function() {
      if (this.value) {
        return "true";
      } else if (this.value != null) {
        return "false";
      } else {
        return void 0;
      }
    };

    return MWSBool;

  })(MWSParam);

  MWSTimestamp = (function(_super) {
    __extends(MWSTimestamp, _super);

    function MWSTimestamp() {
      _ref1 = MWSTimestamp.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    MWSTimestamp.prototype.get = function() {
      var _ref2;
      if (((_ref2 = this.value) != null ? _ref2.constructor : void 0) === Date) {
        return this.value.toISOString();
      } else {
        return this.value;
      }
    };

    MWSTimestamp.prototype.set = function(val) {
      var e;
      if (val == null) {
        val = new Date();
      }
      if (val.constructor !== Date) {
        try {
          this.value = new Date(val);
        } catch (_error) {
          e = _error;
          this.value = val;
        }
      } else {
        this.value = val;
      }
      return this;
    };

    return MWSTimestamp;

  })(MWSParam);

  MWSParamList = (function(_super) {
    __extends(MWSParamList, _super);

    function MWSParamList(name, type, required, value) {
      this.name = name;
      this.type = type;
      this.required = required;
      MWSParamList.__super__.constructor.call(this, this.name, this.required, value != null ? value : []);
      this.list = true;
    }

    MWSParamList.prototype.render = function(obj) {
      var k, v, _ref2;
      if (obj == null) {
        obj = {};
      }
      if (this.value.length < 1 && this.required) {
        throw "Required parameter list, " + this.name + " is empty!";
      }
      _ref2 = this.get();
      for (k in _ref2) {
        v = _ref2[k];
        obj[k] = v;
      }
      return obj;
    };

    MWSParamList.prototype.clear = function() {
      return this.value = [];
    };

    MWSParamList.prototype.add = function() {
      var vals;
      vals = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.value = this.value.concat(vals);
    };

    MWSParamList.prototype.get = function() {
      var count, i, index, list, v, _i, _j, _len, _len1, _ref2;
      index = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      list = {};
      count = 0;
      if (index.length < 1) {
        _ref2 = this.value;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          v = _ref2[_i];
          list["" + this.name + "." + this.type + "." + (++count)] = v;
        }
      } else {
        for (_j = 0, _len1 = index.length; _j < _len1; _j++) {
          i = index[_j];
          if (this.value[i] == null) {
            throw "ERROR: INVALID INDEX " + i;
          }
          list["" + this.name + "." + this.type + "." + (++count)] = this.value[i];
        }
      }
      return list;
    };

    MWSParamList.prototype.set = function(val) {
      if (Array.isArray(val)) {
        return this.value = val;
      } else {
        return this.value = [val];
      }
    };

    return MWSParamList;

  })(MWSParam);

  MWSEnum = (function(_super) {
    __extends(MWSEnum, _super);

    function MWSEnum(name, members, required, value) {
      this.name = name;
      this.members = members != null ? members : [];
      this.required = required != null ? required : false;
      this.value = null;
      if (value != null) {
        this.set(value);
      }
    }

    MWSEnum.prototype.set = function(val) {
      if (__indexOf.call(this.members, val) >= 0) {
        return this.value = val;
      } else if (this.members[val] != null) {
        return this.value = this.members[val];
      } else {
        throw "Invalid enumeration value, '" + val + "', must be a member or index of " + this.members;
      }
    };

    return MWSEnum;

  })(MWSParam);

  MWSEnumList = (function(_super) {
    __extends(MWSEnumList, _super);

    function MWSEnumList(name, type, members, required, initValue) {
      var m, _i, _len, _ref2;
      this.name = name;
      this.type = type;
      this.members = members;
      this.required = required != null ? required : false;
      this.list = true;
      this.value = {};
      _ref2 = this.members;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        m = _ref2[_i];
        this.value[m] = initValue != null ? initValue : false;
      }
    }

    MWSEnumList.prototype.render = function(obj) {
      var k, onset, v;
      if (obj == null) {
        obj = {};
      }
      onset = this.get();
      if (onset.length < 1 && this.required) {
        throw "Required paremeter list (enum), " + this.name + " is empty!";
      }
      for (k in onset) {
        v = onset[k];
        obj[k] = v;
      }
      return obj;
    };

    MWSEnumList.prototype.enable = function() {
      var v, values, _results;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (v in values) {
        if (__indexOf.call(this.members, v) >= 0) {
          _results.push(this.value[v] = true);
        }
      }
      return _results;
    };

    MWSEnumList.prototype.disable = function() {
      var v, values, _results;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (v in values) {
        if (__indexOf.call(this.members, v) >= 0) {
          _results.push(this.value[v] = false);
        }
      }
      return _results;
    };

    MWSEnumList.prototype.toggle = function() {
      var v, values, _results;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (v in values) {
        if (__indexOf.call(this.members, v) >= 0) {
          _results.push(this.value[v] = this.value[v] ? false : true);
        }
      }
      return _results;
    };

    MWSEnumList.prototype.clear = function() {
      return this.disable(this.members);
    };

    MWSEnumList.prototype.all = function() {
      return this.enable(this.members);
    };

    MWSEnumList.prototype.invert = function() {
      return this.toggle(this.members);
    };

    MWSEnumList.prototype.add = function(value, enabled) {
      if (enabled == null) {
        enabled = true;
      }
      this.members[value] = enabled;
      this.value[value] = enabled;
      return this;
    };

    MWSEnumList.prototype.get = function() {
      var count, i, k, list, v, _ref2;
      list = {};
      count = 0;
      for (i in this.value) {
        _ref2 = this.value[i];
        for (k in _ref2) {
          v = _ref2[k];
          if (v === true) {
            list["" + this.name + "." + this.type + "." + (++count)] = k;
          }
        }
      }
      return list;
    };

    return MWSEnumList;

  })(MWSParamList);

  MWSComplexParam = (function(_super) {
    __extends(MWSComplexParam, _super);

    function MWSComplexParam(name, params, required, value) {
      this.name = name;
      this.params = params;
      this.required = required;
      if (this.params == null) {
        this.params = {};
      }
    }

    MWSComplexParam.prototype.render = function(obj) {
      var fields, k, v;
      if (obj == null) {
        obj = {};
      }
      fields = this.get();
      for (k in fields) {
        v = fields[k];
        if (v === null) {
          throw "Missing required parameter " + k;
        } else {
          obj[k] = v;
        }
      }
      return obj;
    };

    MWSComplexParam.prototype.render = function(obj) {
      var k, n, p, v, _ref2, _ref3, _ref4;
      if (obj == null) {
        obj = {};
      }
      _ref2 = this.params;
      for (k in _ref2) {
        p = _ref2[k];
        n = (_ref3 = p.name) != null ? _ref3 : k;
        v = (_ref4 = typeof p.get === "function" ? p.get() : void 0) != null ? _ref4 : p.value;
        if (v != null) {
          obj["" + this.name + "." + n] = v;
        } else if (p.required) {
          throw "Missing required parameter " + this.name + "." + n;
        }
      }
      return obj;
    };

    MWSComplexParam.prototype.get = function(field) {
      var k, obj, p, _ref2, _ref3, _results;
      if ((field != null) && (this.params[field] != null)) {
        return this.params[field].get();
      } else if (field == null) {
        obj = {};
        _ref2 = this.params;
        _results = [];
        for (k in _ref2) {
          p = _ref2[k];
          _results.push(obj[k] = p);
        }
        return _results;
      } else {
        _ref3 = this.params;
        for (k in _ref3) {
          p = _ref3[k];
          if (p.name === field) {
            return p;
          }
        }
        throw "There is no field, " + field + ", in " + this.name;
      }
    };

    MWSComplexParam.prototype.set = function(field, value) {
      var k, v, _ref2, _results, _results1;
      if (arguments.length === 1 && typeof field === 'object') {
        _results = [];
        for (k in field) {
          v = field[k];
          _results.push(this.set(k, v));
        }
        return _results;
      } else if (this.params[field] != null) {
        if (this.params[field].set != null) {
          return this.params[field].set(value);
        } else {
          return this.params[field].value = value;
        }
      } else {
        _ref2 = this.params;
        _results1 = [];
        for (k in _ref2) {
          v = _ref2[k];
          if (v.name.toLowerCase() === field.toLowerCase()) {
            _results1.push(this.set(k, value));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }
    };

    return MWSComplexParam;

  })(MWSParam);

  MWSComplexList = (function(_super) {
    __extends(MWSComplexList, _super);

    function MWSComplexList(name, type, required, value) {
      this.name = name;
      this.type = type;
      this.required = required;
      MWSComplexList.__super__.constructor.call(this, this.name, this.required, value != null ? value : []);
      this.list = true;
    }

    MWSComplexList.prototype.render = function(obj) {
      var k, v, _ref2;
      if (obj == null) {
        obj = {};
      }
      if (this.value.length < 1 && this.required) {
        throw "Required (complex) parameter list, " + this.name + " is empty!";
      }
      _ref2 = this.get();
      for (k in _ref2) {
        v = _ref2[k];
        v.name = k;
        v.render(obj);
      }
      return obj;
    };

    return MWSComplexList;

  })(MWSParamList);

  module.exports = {
    MARKETPLACES: MWS_MARKETPLACES,
    LOCALES: MWS_LOCALES,
    types: types,
    Client: MWSClient,
    Request: MWSRequest,
    Response: MWSResponse,
    Service: MWSService,
    Param: MWSParam,
    Bool: MWSBool,
    Timestamp: MWSTimestamp,
    ParamList: MWSParamList,
    Enum: MWSEnum,
    EnumList: MWSEnumList,
    ComplexParam: MWSComplexParam,
    ComplexList: MWSComplexList
  };

}).call(this);
